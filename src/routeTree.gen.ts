/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NewRouteImport } from './routes/new'
import { Route as IndexRouteImport } from './routes/index'
import { Route as JoinInviteCodeRouteImport } from './routes/join/$inviteCode'
import { Route as GroupGroupIdRouteImport } from './routes/group/$groupId'
import { Route as GroupGroupIdNewExpenseRouteImport } from './routes/group/$groupId/new-expense'
import { Route as GroupGroupIdEditExpenseExpenseIdRouteImport } from './routes/group/$groupId/edit-expense/$expenseId'

const NewRoute = NewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const JoinInviteCodeRoute = JoinInviteCodeRouteImport.update({
  id: '/join/$inviteCode',
  path: '/join/$inviteCode',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupGroupIdRoute = GroupGroupIdRouteImport.update({
  id: '/group/$groupId',
  path: '/group/$groupId',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupGroupIdNewExpenseRoute = GroupGroupIdNewExpenseRouteImport.update({
  id: '/new-expense',
  path: '/new-expense',
  getParentRoute: () => GroupGroupIdRoute,
} as any)
const GroupGroupIdEditExpenseExpenseIdRoute =
  GroupGroupIdEditExpenseExpenseIdRouteImport.update({
    id: '/edit-expense/$expenseId',
    path: '/edit-expense/$expenseId',
    getParentRoute: () => GroupGroupIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/group/$groupId': typeof GroupGroupIdRouteWithChildren
  '/join/$inviteCode': typeof JoinInviteCodeRoute
  '/group/$groupId/new-expense': typeof GroupGroupIdNewExpenseRoute
  '/group/$groupId/edit-expense/$expenseId': typeof GroupGroupIdEditExpenseExpenseIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/group/$groupId': typeof GroupGroupIdRouteWithChildren
  '/join/$inviteCode': typeof JoinInviteCodeRoute
  '/group/$groupId/new-expense': typeof GroupGroupIdNewExpenseRoute
  '/group/$groupId/edit-expense/$expenseId': typeof GroupGroupIdEditExpenseExpenseIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/new': typeof NewRoute
  '/group/$groupId': typeof GroupGroupIdRouteWithChildren
  '/join/$inviteCode': typeof JoinInviteCodeRoute
  '/group/$groupId/new-expense': typeof GroupGroupIdNewExpenseRoute
  '/group/$groupId/edit-expense/$expenseId': typeof GroupGroupIdEditExpenseExpenseIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/new'
    | '/group/$groupId'
    | '/join/$inviteCode'
    | '/group/$groupId/new-expense'
    | '/group/$groupId/edit-expense/$expenseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/new'
    | '/group/$groupId'
    | '/join/$inviteCode'
    | '/group/$groupId/new-expense'
    | '/group/$groupId/edit-expense/$expenseId'
  id:
    | '__root__'
    | '/'
    | '/new'
    | '/group/$groupId'
    | '/join/$inviteCode'
    | '/group/$groupId/new-expense'
    | '/group/$groupId/edit-expense/$expenseId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NewRoute: typeof NewRoute
  GroupGroupIdRoute: typeof GroupGroupIdRouteWithChildren
  JoinInviteCodeRoute: typeof JoinInviteCodeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/join/$inviteCode': {
      id: '/join/$inviteCode'
      path: '/join/$inviteCode'
      fullPath: '/join/$inviteCode'
      preLoaderRoute: typeof JoinInviteCodeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/group/$groupId': {
      id: '/group/$groupId'
      path: '/group/$groupId'
      fullPath: '/group/$groupId'
      preLoaderRoute: typeof GroupGroupIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/group/$groupId/new-expense': {
      id: '/group/$groupId/new-expense'
      path: '/new-expense'
      fullPath: '/group/$groupId/new-expense'
      preLoaderRoute: typeof GroupGroupIdNewExpenseRouteImport
      parentRoute: typeof GroupGroupIdRoute
    }
    '/group/$groupId/edit-expense/$expenseId': {
      id: '/group/$groupId/edit-expense/$expenseId'
      path: '/edit-expense/$expenseId'
      fullPath: '/group/$groupId/edit-expense/$expenseId'
      preLoaderRoute: typeof GroupGroupIdEditExpenseExpenseIdRouteImport
      parentRoute: typeof GroupGroupIdRoute
    }
  }
}

interface GroupGroupIdRouteChildren {
  GroupGroupIdNewExpenseRoute: typeof GroupGroupIdNewExpenseRoute
  GroupGroupIdEditExpenseExpenseIdRoute: typeof GroupGroupIdEditExpenseExpenseIdRoute
}

const GroupGroupIdRouteChildren: GroupGroupIdRouteChildren = {
  GroupGroupIdNewExpenseRoute: GroupGroupIdNewExpenseRoute,
  GroupGroupIdEditExpenseExpenseIdRoute: GroupGroupIdEditExpenseExpenseIdRoute,
}

const GroupGroupIdRouteWithChildren = GroupGroupIdRoute._addFileChildren(
  GroupGroupIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NewRoute: NewRoute,
  GroupGroupIdRoute: GroupGroupIdRouteWithChildren,
  JoinInviteCodeRoute: JoinInviteCodeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
